#include <string>

#include "pybind11/pybind11.h"
#include "asmjit/core.h"

namespace py = pybind11;

void init_core(py::module_ &m) {
    py::class_<asmjit::CodeHolder>(m, "CodeHolder")
        .def(py::init<>())
        .def("hasBaseAddress", &asmjit::CodeHolder::hasBaseAddress);

    py::enum_<asmjit::ErrorCode>(m, "ErrorCode")
        .value("ErrorOk", asmjit::ErrorCode::kErrorOk, "No error (success).")
        .value("ErrorOutOfMemory", asmjit::ErrorCode::kErrorOutOfMemory, "Out of memory.")
        .value("ErrorInvalidArgument", asmjit::ErrorCode::kErrorInvalidArgument, "Invalid argument.")
        .value("ErrorInvalidState", asmjit::ErrorCode::kErrorInvalidState, "Invalid state. If this error is returned it means that either you are doing something wrong or AsmJit caught itself by doing something wrong. This error should never be ignored.")
        .value("ErrorInvalidArch", asmjit::ErrorCode::kErrorInvalidArch, "Invalid or incompatible architecture.")
        .value("ErrorNotInitialized", asmjit::ErrorCode::kErrorNotInitialized, "The object is not initialized.")
        .value("ErrorAlreadyInitialized", asmjit::ErrorCode::kErrorAlreadyInitialized, "The object is already initialized.")
        .value("ErrorFeatureNotEnabled", asmjit::ErrorCode::kErrorFeatureNotEnabled, "Either a built-in feature was disabled at compile time and it's not available or the feature is not available on the target platform. For example trying to allocate large pages on unsupported platform would return this error.")
        .value("ErrorTooManyHandles", asmjit::ErrorCode::kErrorTooManyHandles, "Too many handles (Windows) or file descriptors (Unix/Posix).")
        .value("ErrorTooLarge", asmjit::ErrorCode::kErrorTooLarge, "Code generated is larger than allowed.")
        .value("ErrorNoCodeGenerated", asmjit::ErrorCode::kErrorNoCodeGenerated, "No code generated. Returned by runtime if the  CodeHolder contains no code.")
        .value("ErrorInvalidDirective", asmjit::ErrorCode::kErrorInvalidDirective, "Invalid directive.")
        .value("ErrorInvalidLabel", asmjit::ErrorCode::kErrorInvalidLabel, "Attempt to use uninitialized label.")
        .value("ErrorTooManyLabels", asmjit::ErrorCode::kErrorTooManyLabels, "Label index overflow - a single  BaseAssembler instance can hold almost 2^32 (4 billion) labels. If there is an attempt to create more labels then this error is returned.")
        .value("ErrorLabelAlreadyBound", asmjit::ErrorCode::kErrorLabelAlreadyBound, "Label is already bound.")
        .value("ErrorLabelAlreadyDefined", asmjit::ErrorCode::kErrorLabelAlreadyDefined, "Label is already defined (named labels).")
        .value("ErrorLabelNameTooLong", asmjit::ErrorCode::kErrorLabelNameTooLong, "Label name is too long.")
        .value("ErrorInvalidLabelName", asmjit::ErrorCode::kErrorInvalidLabelName, "Label must always be local if it's anonymous (without a name).")
        .value("ErrorInvalidParentLabel", asmjit::ErrorCode::kErrorInvalidParentLabel, "Parent id passed to  CodeHolder::newNamedLabelEntry() was either invalid or parent is not supported by the requested `LabelType`.")
        .value("ErrorInvalidSection", asmjit::ErrorCode::kErrorInvalidSection, "Invalid section.")
        .value("ErrorTooManySections", asmjit::ErrorCode::kErrorTooManySections, "Too many sections (section index overflow).")
        .value("ErrorInvalidSectionName", asmjit::ErrorCode::kErrorInvalidSectionName, "Invalid section name (most probably too long).")
        .value("ErrorTooManyRelocations", asmjit::ErrorCode::kErrorTooManyRelocations, "Relocation index overflow (too many relocations).")
        .value("ErrorInvalidRelocEntry", asmjit::ErrorCode::kErrorInvalidRelocEntry, "Invalid relocation entry.")
        .value("ErrorRelocOffsetOutOfRange", asmjit::ErrorCode::kErrorRelocOffsetOutOfRange, "Reloc entry contains address that is out of range (unencodable).")
        .value("ErrorInvalidAssignment", asmjit::ErrorCode::kErrorInvalidAssignment, "Invalid assignment to a register, function argument, or function return value.")
        .value("ErrorInvalidInstruction", asmjit::ErrorCode::kErrorInvalidInstruction, "Invalid instruction.")
        .value("ErrorInvalidRegType", asmjit::ErrorCode::kErrorInvalidRegType, "Invalid register type.")
        .value("ErrorInvalidRegGroup", asmjit::ErrorCode::kErrorInvalidRegGroup, "Invalid register group.")
        .value("ErrorInvalidPhysId", asmjit::ErrorCode::kErrorInvalidPhysId, "Invalid physical register id.")
        .value("ErrorInvalidVirtId", asmjit::ErrorCode::kErrorInvalidVirtId, "Invalid virtual register id.")
        .value("ErrorInvalidElementIndex", asmjit::ErrorCode::kErrorInvalidElementIndex, "Invalid element index (ARM).")
        .value("ErrorInvalidPrefixCombination", asmjit::ErrorCode::kErrorInvalidPrefixCombination, "Invalid prefix combination (X86|X64).")
        .value("ErrorInvalidLockPrefix", asmjit::ErrorCode::kErrorInvalidLockPrefix, "Invalid LOCK prefix (X86|X64).")
        .value("ErrorInvalidXAcquirePrefix", asmjit::ErrorCode::kErrorInvalidXAcquirePrefix, "Invalid XACQUIRE prefix (X86|X64).")
        .value("ErrorInvalidXReleasePrefix", asmjit::ErrorCode::kErrorInvalidXReleasePrefix, "Invalid XRELEASE prefix (X86|X64).")
        .value("ErrorInvalidRepPrefix", asmjit::ErrorCode::kErrorInvalidRepPrefix, "Invalid REP prefix (X86|X64).")
        .value("ErrorInvalidRexPrefix", asmjit::ErrorCode::kErrorInvalidRexPrefix, "Invalid REX prefix (X86|X64).")
        .value("ErrorInvalidExtraReg", asmjit::ErrorCode::kErrorInvalidExtraReg, "Invalid {...} register (X86|X64).")
        .value("ErrorInvalidKMaskUse", asmjit::ErrorCode::kErrorInvalidKMaskUse, "Invalid {k} use (not supported by the instruction) (X86|X64).")
        .value("ErrorInvalidKZeroUse", asmjit::ErrorCode::kErrorInvalidKZeroUse, "Invalid {k}{z} use (not supported by the instruction) (X86|X64).")
        .value("ErrorInvalidBroadcast", asmjit::ErrorCode::kErrorInvalidBroadcast, "Invalid broadcast - Currently only related to invalid use of AVX-512 {1tox} (X86|X64).")
        .value("ErrorInvalidEROrSAE", asmjit::ErrorCode::kErrorInvalidEROrSAE, "Invalid 'embedded-rounding' {er} or 'suppress-all-exceptions' {sae} (AVX-512) (X86|X64).")
        .value("ErrorInvalidAddress", asmjit::ErrorCode::kErrorInvalidAddress, "Invalid address used (not encodable).")
        .value("ErrorInvalidAddressIndex", asmjit::ErrorCode::kErrorInvalidAddressIndex, "Invalid index register used in memory address (not encodable).")
        .value("ErrorInvalidAddressScale", asmjit::ErrorCode::kErrorInvalidAddressScale, "Invalid address scale (not encodable).")
        .value("ErrorInvalidAddress64Bit", asmjit::ErrorCode::kErrorInvalidAddress64Bit, "Invalid use of 64-bit address.")
        .value("ErrorInvalidAddress64BitZeroExtension", asmjit::ErrorCode::kErrorInvalidAddress64BitZeroExtension, "Invalid use of 64-bit address that require 32-bit zero-extension (X64).")
        .value("ErrorInvalidDisplacement", asmjit::ErrorCode::kErrorInvalidDisplacement, "Invalid displacement (not encodable).")
        .value("ErrorInvalidSegment", asmjit::ErrorCode::kErrorInvalidSegment, "Invalid segment (X86).")
        .value("ErrorInvalidImmediate", asmjit::ErrorCode::kErrorInvalidImmediate, "Invalid immediate (out of bounds on X86 and invalid pattern on ARM).")
        .value("ErrorInvalidOperandSize", asmjit::ErrorCode::kErrorInvalidOperandSize, "Invalid operand size.")
        .value("ErrorAmbiguousOperandSize", asmjit::ErrorCode::kErrorAmbiguousOperandSize, "Ambiguous operand size (memory has zero size while it's required to determine the operation type.")
        .value("ErrorOperandSizeMismatch", asmjit::ErrorCode::kErrorOperandSizeMismatch, "Mismatching operand size (size of multiple operands doesn't match the operation size).")
        .value("ErrorInvalidOption", asmjit::ErrorCode::kErrorInvalidOption, "Invalid option.")
        .value("ErrorOptionAlreadyDefined", asmjit::ErrorCode::kErrorOptionAlreadyDefined, "Option already defined.")
        .value("ErrorInvalidTypeId", asmjit::ErrorCode::kErrorInvalidTypeId, "Invalid TypeId.")
        .value("ErrorInvalidUseOfGpbHi", asmjit::ErrorCode::kErrorInvalidUseOfGpbHi, "Invalid use of a 8-bit GPB-HIGH register.")
        .value("ErrorInvalidUseOfGpq", asmjit::ErrorCode::kErrorInvalidUseOfGpq, "Invalid use of a 64-bit GPQ register in 32-bit mode.")
        .value("ErrorInvalidUseOfF80", asmjit::ErrorCode::kErrorInvalidUseOfF80, "Invalid use of an 80-bit float (TypeId::kFloat80).")
        .value("ErrorNotConsecutiveRegs", asmjit::ErrorCode::kErrorNotConsecutiveRegs, "Instruction requires the use of consecutive registers, but registers in operands weren't (AVX512, ASIMD load/store, etc...).")
        .value("ErrorConsecutiveRegsAllocation", asmjit::ErrorCode::kErrorConsecutiveRegsAllocation, "Failed to allocate consecutive registers - allocable registers either too restricted or a bug in RW info.")
        .value("ErrorIllegalVirtReg", asmjit::ErrorCode::kErrorIllegalVirtReg, "Illegal virtual register - reported by instruction validation.")
        .value("ErrorTooManyVirtRegs", asmjit::ErrorCode::kErrorTooManyVirtRegs, "AsmJit cannot create more virtual registers.")
        .value("ErrorNoMorePhysRegs", asmjit::ErrorCode::kErrorNoMorePhysRegs, "AsmJit requires a physical register, but no one is available.")
        .value("ErrorOverlappedRegs", asmjit::ErrorCode::kErrorOverlappedRegs, "A variable has been assigned more than once to a function argument (BaseCompiler).")
        .value("ErrorOverlappingStackRegWithRegArg", asmjit::ErrorCode::kErrorOverlappingStackRegWithRegArg, "Invalid register to hold stack arguments offset.")
        .value("ErrorExpressionLabelNotBound", asmjit::ErrorCode::kErrorExpressionLabelNotBound, "Unbound label cannot be evaluated by expression.")
        .value("ErrorExpressionOverflow", asmjit::ErrorCode::kErrorExpressionOverflow, "Arithmetic overflow during expression evaluation.")
        .value("ErrorFailedToOpenAnonymousMemory", asmjit::ErrorCode::kErrorFailedToOpenAnonymousMemory, "Failed to open anonymous memory handle or file descriptor.")
        .value("ErrorFailedToOpenFile", asmjit::ErrorCode::kErrorFailedToOpenFile, "Failed to open a file. This is a generic error that is used by internal filesystem API.")
        .value("ErrorProtectionFailure", asmjit::ErrorCode::kErrorProtectionFailure, "Protection failure can be returned from a virtual memory allocator or when trying to change memory access permissions.")
        .export_values();
}
